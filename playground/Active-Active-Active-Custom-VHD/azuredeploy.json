{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "FortiGateNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Name for FortiGate virtual appliances (A & B will be appended to the end of each respectively)."
      }
    },
    "osDiskVhdUri": {
      "type": "string",
      "metadata": {
        "description": "Uri of the existing VHD in ARM standard or premium storage"
      }
    },
    "instanceType": {
      "type": "string",
      "defaultValue": "Standard_F4s",
      "allowedValues": [ "Standard_F1s", "Standard_F2s", "Standard_F4s", "Standard_F8s", "Standard_F1", "Standard_F2", "Standard_F4", "Standard_F8", "Standard_F1s_v2", "Standard_F2s_v2", "Standard_F4s_v2", "Standard_F8s_v2" ],
      "metadata": {
        "description": "Virtual Machine size selection"
      }
    },
    "publicIPNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify if to use a public IP, and if so whether it's new"
      }
    },
    "publicIPName": {
      "type": "string",
      "defaultValue": "FGTAPClusterPublicIP",
      "metadata": {
        "description": "Name of Public IP address element."
      }
    },
    "publicIPResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs."
      }
    },
    "publicIPAddressType": {
      "type": "string",
      "defaultValue": "Static",
      "allowedValues": [
        "Dynamic",
        "Static"
      ],
      "metadata": {
        "description": "Type of public IP address"
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network."
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the virtual network - or new resource group from above (if new vnet)"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Virtual Network Address prefix"
      }
    },
    "subnet1Name": {
      "type": "string",
      "defaultValue": "WANSubnet",
      "metadata": {
        "description": "Subnet 1 Name"
      }
    },
    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "Subnet 1 Prefix"
      }
    },
    "subnet2Name": {
      "type": "string",
      "defaultValue": "LANSubnet",
      "metadata": {
        "description": "Subnet 2 Name"
      }
    },
    "subnet2Prefix": {
      "type": "string",
      "defaultValue": "10.0.2.0/24",
      "metadata": {
        "description": "Subnet 2 Prefix"
      }
    },
    "subnet3Name": {
      "type": "string",
      "defaultValue": "HASubnet",
      "metadata": {
        "description": "Subnet 3 Name"
      }
    },
    "subnet3Prefix": {
      "type": "string",
      "defaultValue": "10.0.3.0/24",
      "metadata": {
        "description": "Subnet 2 Prefix"
      }
    },
    "subnet4Name": {
      "type": "string",
      "defaultValue": "MGMTSubnet",
      "metadata": {
        "description": "Subnet 4 Name"
      }
    },
    "subnet4Prefix": {
      "type": "string",
      "defaultValue": "10.0.4.0/24",
      "metadata": {
        "description": "Subnet 4 Prefix"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "storageApiVersion": "2018-07-01",
    "computeApiVersion": "2018-06-01",
    "networkApiVersion": "2018-11-01",

    "diagStorageAccountName": "[concat(toLower('jbifortiproxydiag'))]",

    "availabilitySetName": "[concat(parameters('FortiGateNamePrefix'),'-AvailabilitySet')]",
    "availabilitySetId": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",

    "vnetName": "[if(equals(parameters('vnetName'),''),concat(parameters('FortiGateNamePrefix'),'-VNET'),parameters('vnetName'))]",
    "vnetID": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks', variables('vnetName')))]",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', parameters('subnet1Name'))]",
    "subnet2Ref": "[concat(variables('vnetID'),'/subnets/', parameters('subnet2Name'))]",
    "subnet3Ref": "[concat(variables('vnetID'),'/subnets/', parameters('subnet3Name'))]",
    "subnet4Ref": "[concat(variables('vnetID'),'/subnets/', parameters('subnet4Name'))]",

    "fg1VmName": "[concat(parameters('FortiGateNamePrefix'),'-FPRX-A')]",
    "fg1ImageName": "[concat(variables('fg1VmName'), '-image')]",
    "fg2VmName": "[concat(parameters('FortiGateNamePrefix'),'-FPRX-B')]",
    "fg2ImageName": "[concat(variables('fg2VmName'), '-image')]",
    "fg3VmName": "[concat(parameters('FortiGateNamePrefix'),'-FPRX-C')]",
    "fg3ImageName": "[concat(variables('fg3VmName'), '-image')]",

    "network_NIC_fg11_Name": "[concat(variables('fg1VmName'),'-Nic0')]",
    "network_NIC_fg11_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg11_Name'))]",
    "network_NIC_fg21_Name": "[concat(variables('fg2VmName'),'-Nic0')]",
    "network_NIC_fg21_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg21_Name'))]",
    "network_NIC_fg31_Name": "[concat(variables('fg3VmName'),'-Nic0')]",
    "network_NIC_fg31_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg31_Name'))]",

    "network_NIC_fg12_Name": "[concat(variables('fg1VmName'),'-Nic1')]",
    "network_NIC_fg12_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg12_Name'))]",
    "network_NIC_fg22_Name": "[concat(variables('fg2VmName'),'-Nic1')]",
    "network_NIC_fg22_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg22_Name'))]",
    "network_NIC_fg32_Name": "[concat(variables('fg3VmName'),'-Nic1')]",
    "network_NIC_fg32_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg32_Name'))]",

    "network_NIC_fg13_Name": "[concat(variables('fg1VmName'),'-Nic2')]",
    "network_NIC_fg13_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg13_Name'))]",
    "network_NIC_fg23_Name": "[concat(variables('fg2VmName'),'-Nic2')]",
    "network_NIC_fg23_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg23_Name'))]",
    "network_NIC_fg33_Name": "[concat(variables('fg3VmName'),'-Nic2')]",
    "network_NIC_fg33_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg33_Name'))]",

    "network_NIC_fg14_Name": "[concat(variables('fg1VmName'),'-Nic3')]",
    "network_NIC_fg14_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg14_Name'))]",
    "network_NIC_fg24_Name": "[concat(variables('fg2VmName'),'-Nic3')]",
    "network_NIC_fg24_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg24_Name'))]",
    "network_NIC_fg34_Name": "[concat(variables('fg3VmName'),'-Nic3')]",
    "network_NIC_fg34_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg34_Name'))]",

    "nsgName": "[concat(parameters('FortiGateNamePrefix'),'-',uniqueString(resourceGroup().id),'-NSG')]",

    "publicIPName": "[if(equals(parameters('publicIPName'),''),concat(parameters('fortigateNamePrefix'),'-FPX-PIP'),parameters('publicIPName'))]",
    "publicIPId": "[if(equals(parameters('publicIPNewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName')),resourceId(parameters('publicIPResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIPName')))]",

    "sn1IPArray": "[split(parameters('subnet1Prefix'),'.')]",
    "sn1IPArray2ndString": "[string(variables('sn1IPArray')[3])]",
    "sn1IPArray2nd": "[split(variables('sn1IPArray2ndString'),'/')]",
    "sn1CIDRmask": "[string(int(variables('sn1IPArray2nd')[1]))]",
    "sn1IPArray3": "[string(add(int(variables('sn1IPArray2nd')[0]),1))]",
    "sn1IPArray2": "[string(int(variables('sn1IPArray')[2]))]",
    "sn1IPArray1": "[string(int(variables('sn1IPArray')[1]))]",
    "sn1IPArray0": "[string(int(variables('sn1IPArray')[0]))]",
    "sn1GatewayIP": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',variables('sn1IPArray3'))]",
    "sn1IPfg1": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPArray2nd')[0]),4))]",
    "sn1IPfg2": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPArray2nd')[0]),5))]",
    "sn1IPfg3": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPArray2nd')[0]),6))]",

    "sn2IPArray": "[split(parameters('subnet2Prefix'),'.')]",
    "sn2IPArray2ndString": "[string(variables('sn2IPArray')[3])]",
    "sn2IPArray2nd": "[split(variables('sn2IPArray2ndString'),'/')]",
    "sn2CIDRmask": "[string(int(variables('sn2IPArray2nd')[1]))]",
    "sn2IPArray3": "[string(add(int(variables('sn2IPArray2nd')[0]),1))]",
    "sn2IPArray2": "[string(int(variables('sn2IPArray')[2]))]",
    "sn2IPArray1": "[string(int(variables('sn2IPArray')[1]))]",
    "sn2IPArray0": "[string(int(variables('sn2IPArray')[0]))]",
    "sn2GatewayIP": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',variables('sn2IPArray3'))]",
    "sn2IPfg1": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),4))]",
    "sn2IPfg2": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),5))]",
    "sn2IPfg3": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),6))]",

    "sn3IPArray": "[split(parameters('subnet3Prefix'),'.')]",
    "sn3IPArray2ndString": "[string(variables('sn3IPArray')[3])]",
    "sn3IPArray2nd": "[split(variables('sn3IPArray2ndString'),'/')]",
    "sn3CIDRmask": "[string(int(variables('sn3IPArray2nd')[1]))]",
    "sn3IPArray3": "[string(add(int(variables('sn3IPArray2nd')[0]),1))]",
    "sn3IPArray2": "[string(int(variables('sn3IPArray')[2]))]",
    "sn3IPArray1": "[string(int(variables('sn3IPArray')[1]))]",
    "sn3IPArray0": "[string(int(variables('sn3IPArray')[0]))]",
    "sn3GatewayIP": "[concat(variables('sn3IPArray0'),'.',variables('sn3IPArray1'),'.',variables('sn3IPArray2'),'.',variables('sn3IPArray3'))]",
    "sn3IPfg1": "[concat(variables('sn3IPArray0'),'.',variables('sn3IPArray1'),'.',variables('sn3IPArray2'),'.',add(int(variables('sn3IPArray2nd')[0]),4))]",
    "sn3IPfg2": "[concat(variables('sn3IPArray0'),'.',variables('sn3IPArray1'),'.',variables('sn3IPArray2'),'.',add(int(variables('sn3IPArray2nd')[0]),5))]",
    "sn3IPfg3": "[concat(variables('sn3IPArray0'),'.',variables('sn3IPArray1'),'.',variables('sn3IPArray2'),'.',add(int(variables('sn3IPArray2nd')[0]),6))]",


    "sn4IPArray": "[split(parameters('subnet4Prefix'),'.')]",
    "sn4IPArray2ndString": "[string(variables('sn4IPArray')[3])]",
    "sn4IPArray2nd": "[split(variables('sn4IPArray2ndString'),'/')]",
    "sn4CIDRmask": "[string(int(variables('sn4IPArray2nd')[1]))]",
    "sn4IPArray3": "[string(add(int(variables('sn4IPArray2nd')[0]),1))]",
    "sn4IPArray2": "[string(int(variables('sn4IPArray')[2]))]",
    "sn4IPArray1": "[string(int(variables('sn4IPArray')[1]))]",
    "sn4IPArray0": "[string(int(variables('sn4IPArray')[0]))]",
    "sn4GatewayIP": "[concat(variables('sn4IPArray0'),'.',variables('sn4IPArray1'),'.',variables('sn4IPArray2'),'.',variables('sn4IPArray3'))]",
    "sn4IPfg1": "[concat(variables('sn4IPArray0'),'.',variables('sn4IPArray1'),'.',variables('sn4IPArray2'),'.',add(int(variables('sn4IPArray2nd')[0]),4))]",
    "sn4IPfg2": "[concat(variables('sn4IPArray0'),'.',variables('sn4IPArray1'),'.',variables('sn4IPArray2'),'.',add(int(variables('sn4IPArray2nd')[0]),5))]",
    "sn4IPfg3": "[concat(variables('sn4IPArray0'),'.',variables('sn4IPArray1'),'.',variables('sn4IPArray2'),'.',add(int(variables('sn4IPArray2nd')[0]),6))]",

    "externalLBName_NatRule_HTTPS_fg1": "[concat(variables('fg1VmName'),'-HTTPS')]",
    "externalLBId_NatRule_HTTPS_fg1": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_HTTPS_fg1'))]",
    "externalLBName_NatRule_SSH_fg1": "[concat(variables('fg1VmName'),'-SSH')]",
    "externalLBId_NatRule_SSH_fg1": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_SSH_fg1'))]",
    "externalLBName_NatRule_HTTP_fg1": "[concat(variables('fg1VmName'),'-HTTP')]",
    "externalLBId_NatRule_HTTP_fg1": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_HTTP_fg1'))]",
    
    "externalLBName_NatRule_HTTPS_fg2": "[concat(variables('fg2VmName'),'-HTTPS')]",
    "externalLBId_NatRule_HTTPS_fg2": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_HTTPS_fg2'))]",
    "externalLBName_NatRule_SSH_fg2": "[concat(variables('fg2VmName'),'-SSH')]",
    "externalLBId_NatRule_SSH_fg2": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_SSH_fg2'))]",
    "externalLBName_NatRule_HTTP_fg2": "[concat(variables('fg2VmName'),'-HTTP')]",
    "externalLBId_NatRule_HTTP_fg2": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_HTTP_fg2'))]",

    "externalLBName_NatRule_HTTPS_fg3": "[concat(variables('fg3VmName'),'-HTTPS')]",
    "externalLBId_NatRule_HTTPS_fg3": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_HTTPS_fg3'))]",
    "externalLBName_NatRule_SSH_fg3": "[concat(variables('fg3VmName'),'-SSH')]",
    "externalLBId_NatRule_SSH_fg3": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_SSH_fg3'))]",
    "externalLBName_NatRule_HTTP_fg3": "[concat(variables('fg3VmName'),'-HTTP')]",
    "externalLBId_NatRule_HTTP_fg3": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_HTTP_fg3'))]",
    
    "externalLBName": "[concat(parameters('fortigateNamePrefix'),'-ExternalLoadBalancer')]",
    "externalLBId": "[resourceId('Microsoft.Network/loadBalancers',variables('externalLBName'))]",
    "externalLBFEName": "[concat(parameters('fortigateNamePrefix'),'-ELB-',parameters('subnet1Name'),'-FrontEnd')]",
    "externalLBFEId": "[resourceID('Microsoft.Network/loadBalancers/frontendIPConfigurations/',variables('externalLBName'),variables('externalLBFEName'))]",
    "externalLBBEName": "[concat(parameters('fortigateNamePrefix'),'-ILB-',parameters('subnet1Name'),'-BackEnd')]",
    "externalLBBEId": "[resourceID('Microsoft.Network/loadBalancers/backendAddressPools/',variables('externalLBName'),variables('externalLBBEName'))]",
    "externalLBProbeName": "lbprobe",
    "externalLBProbeId": "[resourceId('Microsoft.Network/loadBalancers/probes/',variables('externalLBName'),variables('externalLBProbeName'))]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('publicIPNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-04-01",
      "tags": {
      },
      "name": "[variables('publicIPName')]",
      "location": "[parameters('location')]",
      "sku":
      {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[parameters('publicIPAddressType')]"
      }
    },
    {
      "apiVersion": "2020-04-01",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('externalLBName')]",
      "location": "[parameters('location')]",
      "tags": {
      },
      "sku":
      {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('publicIPId')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('externalLBFEName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPId')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('externalLBBEName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('externalLBBEId')]"
              },
              "probe": {
                "id": "[variables('externalLBProbeId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 8080,
              "backendPort": 8080,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5
            },
            "name": "TCP-8080"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('externalLBBEId')]"
              },
              "probe": {
                "id": "[variables('externalLBProbeId')]"
              },
              "protocol": "Udp",
              "frontendPort": 10551,
              "backendPort": 10551,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "Dummy-UDP-10551"
          }
        ],
        "inboundNatRules": [
          {
            "name": "[variables('externalLBName_NatRule_SSH_fg1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4022,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_HTTPS_fg1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4443,
              "backendPort": 443,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_HTTP_fg1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4080,
              "backendPort": 80,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_SSH_fg2')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4023,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_HTTPS_fg2')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4444,
              "backendPort": 443,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_HTTP_fg2')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4081,
              "backendPort": 80,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_SSH_fg3')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4024,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_HTTPS_fg3')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4445,
              "backendPort": 443,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_HTTP_fg3')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4082,
              "backendPort": 80,
              "enableFloatingIP": false
            }
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 8080,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "[variables('externalLBProbeName')]"
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 3
      },
      "sku": {
        "name":  "Aligned"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('diagStorageAccountName')]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('vnetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet2Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet2Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet3Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet3Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet4Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet4Prefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('nsgName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "properties": {
        "securityRules": [
          {
            "name": "AllowAllInbound",
            "properties": {
              "description": "Allow all in",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAllOutbound",
            "properties": {
              "description": "Allow all out",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg11_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfg1')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('externalLBBEId')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg21_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfg2')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('externalLBBEId')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg31_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfg3')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('externalLBBEId')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg12_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn2IPfg1')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Ref')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg22_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn2IPfg2')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Ref')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg32_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn2IPfg3')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Ref')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg13_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn3IPfg1')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet3Ref')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg23_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn3IPfg2')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet3Ref')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg33_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn3IPfg3')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet3Ref')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg14_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn4IPfg1')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet4Ref')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg24_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn4IPfg2')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet4Ref')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg34_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn4IPfg3')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet4Ref')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/images",
      "apiVersion": "[variables('computeApiVersion')]",
      "name": "[variables('fg1ImageName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "osState": "Generalized",
            "blobUri": "[parameters('osDiskVhdUri')]",
            "caching": "ReadWrite",
            "storageAccountType": "Premium_LRS"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fg1VmName')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[variables('network_NIC_fg11_Name')]",
        "[variables('fg1ImageName')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "availabilitySet": {
          "id": "[variables('availabilitySetId')]"
        },
        "osProfile": {
          "computerName": "[variables('fg1VmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(concat('config router static\n edit 1\n set gateway ', variables('sn1GatewayIP'), '\n set device port1\n next\n edit 2\n set dst ', parameters('vnetAddressPrefix'), '\n set gateway ', variables('sn2GatewayIP'), '\n set device port2\n next\n end\n config system interface\n edit port1\n set mode static\n set ip ',  variables('sn1IPfg1'), '/', variables('sn1CIDRmask'), '\n set description external\n set allowaccess ping ssh http https\n next\n edit port2\n set mode static\n set ip ', variables('sn2IPfg1'), '/', variables('sn2CIDRmask'), '\n set description internal\n set allowaccess ping\n next\n edit port3\n set mode static\n set ip ', variables('sn3IPfg1'), '/', variables('sn3CIDRmask'), '\n set description hasyncport\n next\n edit port4\n set mode static\n set ip ', variables('sn4IPfg1'), '/', variables('sn4CIDRmask'), '\n set description management\n set allowaccess ping https ssh http\n next\n end\n'))]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[resourceId('Microsoft.Compute/images', variables('fg1ImageName'))]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('network_NIC_fg11_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg12_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg13_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg14_Id')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(variables('diagStorageAccountName')).primaryEndpoints.blob]"
          }
        }
      }
    },
        {
      "type": "Microsoft.Compute/images",
      "apiVersion": "[variables('computeApiVersion')]",
      "name": "[variables('fg2ImageName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "osState": "Generalized",
            "blobUri": "[parameters('osDiskVhdUri')]",
            "caching": "ReadWrite",
            "storageAccountType": "Premium_LRS"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fg2VmName')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[variables('network_NIC_fg21_Name')]",
        "[variables('fg2ImageName')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "availabilitySet": {
          "id": "[variables('availabilitySetId')]"
        },
        "osProfile": {
          "computerName": "[variables('fg2VmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(concat('config router static\n edit 1\n set gateway ', variables('sn1GatewayIP'), '\n set device port1\n next\n edit 2\n set dst ', parameters('vnetAddressPrefix'), '\n set gateway ', variables('sn2GatewayIP'), '\n set device port2\n next\n end\n config system interface\n edit port1\n set mode static\n set ip ',  variables('sn1IPfg2'), '/', variables('sn1CIDRmask'), '\n set description external\n set allowaccess ping ssh http https\n next\n edit port2\n set mode static\n set ip ', variables('sn2IPfg2'), '/', variables('sn2CIDRmask'), '\n set description internal\n set allowaccess ping\n next\n edit port3\n set mode static\n set ip ', variables('sn3IPfg2'), '/', variables('sn3CIDRmask'), '\n set description hasyncport\n next\n edit port4\n set mode static\n set ip ', variables('sn4IPfg2'), '/', variables('sn4CIDRmask'), '\n set description management\n set allowaccess ping https ssh http\n next\n end\n'))]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[resourceId('Microsoft.Compute/images', variables('fg2ImageName'))]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('network_NIC_fg21_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg22_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg23_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg24_Id')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(variables('diagStorageAccountName')).primaryEndpoints.blob]"
          }
        }
      }
    },
        {
      "type": "Microsoft.Compute/images",
      "apiVersion": "[variables('computeApiVersion')]",
      "name": "[variables('fg3ImageName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "osState": "Generalized",
            "blobUri": "[parameters('osDiskVhdUri')]",
            "caching": "ReadWrite",
            "storageAccountType": "Premium_LRS"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fg3VmName')]",
      "location": "[resourceGroup().location]",
      "tags": {
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[variables('network_NIC_fg31_Name')]",
        "[variables('fg1ImageName')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "availabilitySet": {
          "id": "[variables('availabilitySetId')]"
        },
        "osProfile": {
          "computerName": "[variables('fg3VmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(concat('config router static\n edit 1\n set gateway ', variables('sn1GatewayIP'), '\n set device port1\n next\n edit 2\n set dst ', parameters('vnetAddressPrefix'), '\n set gateway ', variables('sn2GatewayIP'), '\n set device port2\n next\n end\n config system interface\n edit port1\n set mode static\n set ip ',  variables('sn1IPfg3'), '/', variables('sn1CIDRmask'), '\n set description external\n set allowaccess ping ssh http https\n next\n edit port2\n set mode static\n set ip ', variables('sn2IPfg3'), '/', variables('sn2CIDRmask'), '\n set description internal\n set allowaccess ping\n next\n edit port3\n set mode static\n set ip ', variables('sn3IPfg3'), '/', variables('sn3CIDRmask'), '\n set description hasyncport\n next\n edit port4\n set mode static\n set ip ', variables('sn4IPfg3'), '/', variables('sn4CIDRmask'), '\n set description management\n set allowaccess ping https ssh http\n next\n end\n'))]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[resourceId('Microsoft.Compute/images', variables('fg3ImageName'))]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
             {
              "properties": {
                "primary": true
              },
              "id": "[variables('network_NIC_fg31_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg32_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg33_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg34_Id')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(variables('diagStorageAccountName')).primaryEndpoints.blob]"
          }
        }
      }
    }
  ]
  }
